" Plug {{{1
function! s:plug_begin(fn, plugged)
  if empty(glob(a:fn))
    silent execute '!curl -fLo ' . shellescape(a:fn) . ' --create-dirs 
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin(a:plugged)
endfunction

if has('nvim')
  call s:plug_begin($HOME . '/.local/share/nvim/site/autoload/plug.vim',
                  \ $HOME . '/.local/share/nvim/site/plugged')
else
  call s:plug_begin($HOME . '/.vim/autoload/plug.vim', $HOME . '/.vim/plugged')
endif
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'ojroques/vim-oscyank'
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'majutsushi/tagbar'
Plug 'Raimondi/delimitMate'
Plug 'voldikss/vim-translator'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog'
Plug 'rhysd/git-messenger.vim'
Plug 'tweekmonster/startuptime.vim'
Plug 'justinmk/vim-sneak'
Plug 'junegunn/vim-easy-align'
Plug 'lambdalisue/fern.vim'
Plug 'andymass/vim-matchup'
Plug 'michaeljsmith/vim-indent-object'
Plug 'wellle/targets.vim'
Plug 'mbbill/undotree'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'ap/vim-css-color'
Plug 'mhinz/vim-startify'
Plug 'mhinz/vim-grepper'
Plug 'rust-lang/rust.vim'
if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'kevinhwang91/nvim-bqf'
  Plug 'kevinhwang91/nvim-hlslens'
  Plug 'phaazon/hop.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'lewis6991/gitsigns.nvim'
else
  Plug 'airblade/vim-gitgutter'
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
endif
call plug#end()

" Option {{{1
set encoding=utf-8
set hidden
set tabstop=8
set shiftwidth=2
set softtabstop=2
set autoindent
set expandtab       " Expand TABs to spaces
set cmdheight=1     " Give more space for displaying messages
set updatetime=300  " Default 4000ms leads to noticeable delays
set shortmess+=c    " Don't pass messages to |ins-completion-menu|
set hlsearch
set incsearch
set number relativenumber
set colorcolumn=80
set signcolumn=yes
set cursorline
set laststatus=2
set fileencodings=ucs-bom,utf-8,gb18030,cp936,latin1
set list
set t_u7= " https://github.com/vim/vim/issues/390#issuecomment-531477332
set t_RV= " https://stackoverflow.com/questions/21618614/vim-shows-garbage-characters
if !has('gui_running')
  set t_Co=256
endif

" backup/swap/info/undo settings
set nobackup
set nowritebackup
set undofile
set swapfile
if has('nvim')
  set backupdir -=.
  set shada      ='100
else
  let $v = $HOME . '/.vim/files'
  set backupdir  =$v/backup
  set directory  =$v/swap//
  set undodir    =$v/undo
  set viewdir    =$v/view
  set viminfo    ='100,n$v/info/viminfo
  if empty(glob($v))
    silent !mkdir -p $v/{backup,swap,undo,view,info}
  endif
endif

if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±,trail:·'
  let &fillchars = 'vert: ,diff: '  " ⣿
  let &showbreak = '↪ '
  highlight VertSplit ctermfg=242
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  let &fillchars = 'vert: ,stlnc:#'
  let &showbreak = '-> '
  augroup vimrc
    autocmd InsertEnter * set listchars-=trail:.
    autocmd InsertLeave * set listchars+=trail:.
  augroup END
endif

" Init {{{1
syntax on
filetype plugin indent on

augroup vimrc
  autocmd!
augroup END

" Color {{{1
colorscheme gruvbox
set background=dark
if has('termguicolors')
  set termguicolors
endif
let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
hi Normal guibg=NONE ctermbg=NONE

" Mapping {{{1
let mapleader=","
nnoremap Y y$
for x in ['n', 'N', '*', '#', 'g*', 'g#']
  execute printf('nnoremap %s %szzzv', x, x)
endfor
nnoremap T <C-w>gf
nnoremap U     :execute 'ea ' . v:count1 . 'f'<CR>
nnoremap <M-r> :execute 'lat ' . v:count1 . 'f'<CR>
nnoremap <expr> k (v:count > 5 ? 'm`' . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? 'm`' . v:count : '') . 'j'
nnoremap <silent>g/ :let @/ = expand('<cword>')<CR>:set hls<CR>
nnoremap <leader>ev :Tabe ~/.vimrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
inoremap <silent> <C-a> <home>
inoremap <silent> <C-e> <end>
inoremap <silent> <C-h> <left>
inoremap <silent> <C-l> <right>
inoremap <silent> <C-k> <up>
inoremap <silent> <C-j> <down>
inoremap <silent> <C-o> <end><CR>
inoremap <silent> <C-d> <ESC>ddi
cnoremap <C-a> <home>
cnoremap <C-e> <end>
cnoremap <C-h> <left>
cnoremap <C-l> <right>
cnoremap <C-p> <up>
cnoremap <C-n> <down>
" move text
vnoremap < <gv
vnoremap > >gv
vnoremap <silent> <C-j> :m '>+1<CR>gv=gv
vnoremap <silent> <C-k> :m '<-2<CR>gv=gv
" text object
vnoremap <silent> ib GoggV
onoremap <silent> ib :normal vib<CR>
vnoremap <silent> il g_o^
onoremap <silent> il :normal vil<CR>
vnoremap <silent> ia :<C-u>call argtextobj#v(1)<CR>
vnoremap <silent> aa :<C-u>call argtextobj#v(0)<CR>
onoremap <silent> ia :<C-u>call argtextobj#o(1)<CR>
onoremap <silent> aa :<C-u>call argtextobj#o(0)<CR>

nmap d<CR> :%s/\r//eg<CR>``
map zl zL
map zh zH
nnoremap p p=`]
nnoremap <expr> <space>j 'm`' . v:count . 'O<Esc>``'
nnoremap <expr> <space>k 'm`' . v:count . 'o<Esc>``'

" select last inserted text
nnoremap gV `[v`]

nnoremap <leader>w :call <SID>keep_change_marks_exec('w')<CR>
nnoremap <leader>W :call <SID>keep_change_marks_exec('w !sudo tee %')<CR>

" Use <space><space> to:
"   - redraw
"   - clear 'hlsearch'
"   - update the current diff (if any)
" Use {count}<space><space> to:
"   - reload (:edit) the current buffer
nnoremap <silent><expr> <space><space>
  \ (v:count ? ":<C-u>:call <SID>keep_change_marks_exec('edit')<CR>" : '')
  \ . ':nohlsearch' . (has('diff') ? '\|diffupdate' : '') . '<CR>'

function! s:keep_change_marks_exec(cmd)
  call s:save_change_marks()
  execute a:cmd
  call s:restore_change_marks()
endfunction

function! s:save_change_marks() abort
  let s:change_marks = [getpos("'["), getpos("']")]
endfunction

function! s:restore_change_marks() abort
  call setpos("'[", s:change_marks[0])
  call setpos("']", s:change_marks[1])
endfunction

" Window {{{2
nnoremap <S-up>    2<C-w>+
nnoremap <S-down>  2<C-w>-
nnoremap <S-left>  2<C-w><
nnoremap <S-right> 2<C-w>>
" <C-w>= equal size

nnoremap <silent><C-h> :<C-u>call <SID>tmux_navigate('h')<CR>
nnoremap <silent><C-j> :<C-u>call <SID>tmux_navigate('j')<CR>
nnoremap <silent><C-k> :<C-u>call <SID>tmux_navigate('k')<CR>
nnoremap <silent><C-l> :<C-u>call <SID>tmux_navigate('l')<CR>

function! s:tmux_navigate(direction) abort
  let oldwin = winnr()
  execute 'wincmd' a:direction
  if !empty($TMUX) && winnr() == oldwin
    let sock = split($TMUX, ',')[0]
    let direction = tr(a:direction, 'hjkl', 'LDUR')
    silent execute printf('!tmux -S %s select-pane -%s', sock, direction)
    if !has('nvim') | execute 'redraw!' | endif
  endif
endfunction

nnoremap qt :<C-u>tabc<CR>
for i in range(1, 9)
  execute printf('nnoremap <leader>%s %sgt', i, i)
endfor
nnoremap <silent> [t :tabp<CR>:call repeat#set("[t")<CR>
nnoremap <silent> ]t :tabn<CR>:call repeat#set("]t")<CR>
nnoremap <silent> [T :tabr<CR>
nnoremap <silent> ]T :tabl<CR>
nnoremap <silent> \t :+tabm<CR>:call repeat#set("\\t")<CR>
nnoremap <silent> \T :-tabm<CR>:call repeat#set("\\T")<CR>
if has('nvim')
  tnoremap <C-\> <C-\><C-n>
  tnoremap qt <C-\><C-n>:tabc<CR>
  tnoremap [t <C-\><C-n>:tabp<CR>
  tnoremap ]t <C-\><C-n>:tabn<CR>
  tnoremap [T <C-\><C-n>:tabr<CR>
  tnoremap ]T <C-\><C-n>:tabl<CR>
  nnoremap <expr> <F3>
    \ ':tabe<CR>' . (bufexists('term://term') ?
    \ ':b term://term<CR>:bd#<CR>' :
    \ ':terminal<CR><C-\><C-n>:fi term://term<CR>')
else
  nnoremap <F3> <Esc>:shell<CR>
endif
nnoremap <silent> <F2> :Tabe<CR>
inoremap <silent> <F2> <ESC>:Tabe<CR>

command! -nargs=* -complete=file Tabe call Tabe(<f-args>)
function! Tabe(...)
  if a:0 != 0
    for fn in a:000
      execute printf('tabe %s', fn)
    endfor
    return 0
  else
    tab split
    return 1
  endif
endfunction

" Editting {{{2
nnoremap <silent> <F5> :Hexe<CR>
nnoremap <F6> :Hexw<space>

command! -nargs=? -complete=file Hexe :let v=Tabe(<f-args>)
      \ | exe '%!xxd' | set filetype=xxd | exe (v ? 'q' : '')
command! -nargs=1 -complete=file Hexw exe '%!xxd -r' | set binary
      \ | set filetype= | sav! <args>

augroup vimrc
  autocmd BufReadPre   *.bin let &bin=1
  autocmd BufReadPost  *.bin if &bin | %!xxd
  autocmd BufReadPost  *.bin set ft=xxd | endif
  autocmd BufWritePre  *.bin if &bin | %!xxd -r
  autocmd BufWritePre  *.bin endif
  autocmd BufWritePost *.bin if &bin | %!xxd
  autocmd BufWritePost *.bin set nomod | endif
augroup END

command! DeleteInactiveBuffers call <SID>delete_inactive_buffers()
function! s:delete_inactive_buffers()
  let tablist = []
  for i in range(tabpagenr('$'))
    call extend(tablist, tabpagebuflist(i + 1))
  endfor
  let n = 0
  for i in range(1, bufnr('$'))
    if bufexists(i) && !getbufvar(i, "&mod") &&
      \ index(tablist, i) == -1 && bufname(i) !~ 'term://'
      silent execute 'bw!' i
      let n = n + 1
    endif
  endfor
  echom n . ' buffer(s) wiped out'
endfunction

" Navigation {{{2
nnoremap <silent> <leader>qj :call <SID>jumps_as_qflist()<CR>
nnoremap <silent> qq :call <SID>quit_qflist()<CR>

function! s:jumps_as_qflist()
  let jl    = getjumplist()
  let locs  = get(jl, 0)
  let pos   = get(jl, 1)
  let items = []
  let idx   = 1
  let i     = len(locs) - 1

  while i >= 0
    let loc     = get(locs, i)
    let bufnr   = get(loc, 'bufnr')
    let lnum    = get(loc, 'lnum')
    let col     = get(loc, 'col') + 1
    let bufname = bufname(bufnr)
    if bufexists(bufnr) && bufname !~ 'NERD_tree_' &&
      \ bufname !~ '__Tagbar__' && bufname !~ '.git/index'
      let text  = get(getbufline(bufnr, lnum), 0, '......')
      let items = add(items, {
        \ 'bufnr': bufnr,
        \ 'lnum': lnum,
        \ 'col': col,
        \ 'text': text
        \ })
    endif
    if pos + 1 == i
      let idx = len(items)
    endif
    let i -= 1
  endwhile

  call setloclist(0, [], ' ', {
    \ 'title': 'JumpList',
    \ 'items': items,
    \ 'idx': idx
    \ })

  let winid = getloclist(0, {'winid': 0}).winid
  if winid == 0
    execute 'abo lw'
  else
    call win_gotoid(winid)
  endif
endfunction

set qftf=QuickFixTextFunc
function! QuickFixTextFunc(info) abort
  let ret   = []
  let items = []
  if a:info.quickfix
    let items = getqflist({'id': a:info.id, 'items': 0}).items
  else
    let items = getloclist(a:info.winid, {'id': a:info.id, 'items': 0}).items
  endif

  let limit      = 31
  let fname_fmt1 = '%-' . (limit+1) . 's'
  let fname_fmt2 = '…%.' . limit . 's'
  let text_fmt   = '%s |%5d:%-3d|%s%s'

  for idx in range(a:info.start_idx - 1, a:info.end_idx - 1)
    let e     = items[idx]
    let fname = ''
    let str   = ''
    if !e.valid
      let str = e.text
    else
      if e.bufnr > 0
        let fname = bufname(e.bufnr)
        if fname == ''
          let fname = '[No Name]'
        else
          let fname = substitute(fname, $HOME, '~', '&')
        endif

        let fname_len = strchars(fname)
        if fname_len <= limit
          let fname = printf(fname_fmt1, fname)
        else
          let fname = printf(fname_fmt2,
                \ strcharpart(fname, fname_len-limit, 999))
        endif

        let lnum  = e.lnum > 99999 ? -1 : e.lnum
        let col   = e.col > 999 ? -1 : e.col
        let type  = e.type == '' ? '' : ' ' . toupper(strcharpart(e.type, 0, 1))
        let text  = e.text == '' ? '' : ' ' . e.text
        let str   = printf(text_fmt, fname, lnum, col, type, text)
      end
    endif
    let ret = add(ret, str)
  endfor

  return ret
endfunction

function s:quit_qflist()
  let qid = getqflist({'winid': 0}).winid
  let lid = getloclist(0, {'winid': 0}).winid
  if qid == 0 && lid == 0
    execute 'quit'
  elseif lid == 0
    execute 'ccl'
  else
    if qid == 0
      execute 'lcl'
    else
      echo ' [q]uickfix, [l]ocation ? '
      let answer = nr2char(getchar())
      if answer == 'q'
        execute 'ccl'
      elseif answer == 'l'
        execute 'lcl'
      endif
    endif
  endif
endfunction

" Autocmd {{{1
augroup vimrc
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \ | exe "normal! g'\"" | endif
augroup END

" Filetype {{{1
augroup vimrc
  autocmd BufRead,BufNewFile *.stp set filetype=stp
  autocmd Filetype xxd    setlocal readonly
  autocmd FileType sh     xnoremap <buffer> <leader>x :w !bash<CR>
  autocmd FileType python xnoremap <buffer> <leader>x :w !python3<CR>
augroup END

" Plugin {{{1
" Plugin: coc.nvim {{{2
" autocomplete
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if exists('*complete_info')
  inoremap <expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" highlight uses on hover
autocmd CursorHold * silent call CocActionAsync('highlight')

" navigation
nmap <silent> [d <Plug>(coc-diagnostic-prev)
    \ :call repeat#set("\<Plug>(coc-diagnostic-prev)")<CR>
nmap <silent> ]d <Plug>(coc-diagnostic-next)
    \ :call repeat#set("\<Plug>(coc-diagnostic-next)")<CR>
if has('nvim')
  nmap <silent> gd :<C-u>call <SID>goto_definition()<CR>
else
  nmap <silent> gd <Plug>(coc-definition)
endif
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn  <Plug>(coc-rename)

function! s:goto_definition() abort
  call s:goto_definition_lsp_async()
  call timer_start(600, { -> s:goto_definition_fallback() })
endfunction

let s:goto_definition_state = 'Initial'
function! s:goto_definition_lsp_async() abort
  if exists('g:did_coc_loaded') && coc#rpc#ready()
    let s:goto_definition_state = 'Pending'
    call CocActionAsync('jumpDefinition',
      \ { err,resp -> s:goto_definition_lsp_cb(err, resp) })
  endif
endfunction

function! s:goto_definition_lsp_cb(err, resp) abort
  if a:err == v:null && a:resp != v:false
    let s:goto_definition_state = 'Done'
    return
  endif
  " lsp error
  let s:goto_definition_state = 'Done'
  call s:taglist()
endfunction

function! s:goto_definition_fallback(...) abort
  if exists('g:did_coc_loaded') &&
    \ coc#status() =~ 'requesting' | return | endif
  if s:goto_definition_state == 'Done'
    let s:goto_definition_state = 'Initial'
    return
  endif
  " lsp timeout
  let s:goto_definition_state = 'Done'
  call s:taglist()
endfunction

function! s:taglist()
  let pattern = expand('<cword>')
  let tags = taglist('^' . pattern . '$')
  if !empty(tags)
    execute 'tag ' . pattern
    return
  endif
  try
    normal! gd
  catch /E349:/
    echom 'No identifier under cursor'
  endtry
endfunction

" coc action as qflist
nmap <silent> <leader>qr :<C-u>call <SID>coc_as_qflist('references')<CR>
nmap <silent> <leader>qy :<C-u>call <SID>coc_as_qflist('definitions')<CR>
nmap <silent> <leader>qi :<C-u>call <SID>coc_as_qflist('implementations')<CR>

function! s:coc_as_qflist(action) abort
  call CocActionAsync(a:action, { err,data -> s:coc_as_qflist_cb(err, data) })
endfunction

function! s:coc_as_qflist_cb(err, data) abort
  if a:err
    echom 'Coc action error'
  else
    let locs = []
    for loc in a:data
      let item = {
        \ 'filename': substitute(loc.uri, 'file://', '', 'g'),
        \ 'lnum': loc.range.start.line + 1,
        \ 'col': loc.range.start.character,
        \ }
      let locs = add(locs, item)
    endfor
    call setloclist(0, [], ' ', {
      \ 'title': 'CocActionList',
      \ 'items': locs,
      \ })
  endif

  let winid = getloclist(0, {'winid': 0}).winid
  if winid == 0
    execute 'abo lw'
  else
    call win_gotoid(winid)
  endif
endfunction

" show docs
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" scroll popup
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Left>"

" diagnostics to quickfix list
autocmd User CocDiagnosticChange silent call <SID>diagnostic_change()
nnoremap <silent> <leader>qd :call <SID>diagnostic_as_qflist()<CR>
let g:diag_qfid = -1

function! s:diagnostic_change()
  let info = getqflist({ 'id': g:diag_qfid, 'winid': 0, 'nr': 0 })
  if info.winid != 0
    let info.show = 0
    call s:diagnostic_as_qflist(info)
  endif
endfunction

function! s:diagnostic_as_qflist(...)
  let args        = a:0 == 0 ? {} : a:1
  let diagnostics = CocAction('diagnosticList')
  let items       = []
  for diag in diagnostics
    let text = printf('[%s %s] %s', get(diag, 'source', 'coc.nvim'),
      \ get(diag, 'code', ''), get(diag, 'message'))
    let item = {
      \ 'filename': diag.file,
      \ 'lnum': diag.lnum,
      \ 'col': diag.col,
      \ 'text': text,
      \ 'type': diag.severity
      \ }
    let items = add(items, item)
  endfor

  let id    = -1
  let winid = get(args, 'winid', 0)
  let nr    = get(args, 'nr', 0)
  let show  = get(args, 'show', 1)

  if winid && nr
    let id    = g:diag_qfid
  else
    let info  = getqflist({ 'id': g:diag_qfid, 'winid': 0, 'nr': 0 })
    let id    = info.id
    let winid = info.winid
    let nr    = info.nr
  endif

  let action = id == 0 ? ' ' : 'r'
  call setqflist([], action, {
    \ 'id': id,
    \ 'title': 'CocDiagnosticList',
    \ 'items': items
    \ })

  if id == 0
    let info        = getqflist({ 'id': id, 'nr': nr })
    let g:diag_qfid = info.id
    let nr          = info.nr
  endif

  if show
    if winid == 0
      execute 'bo cope'
    else
      call win_gotoid(winid)
    endif
    execute 'sil ' . (has('nvim') ? nr : '') . 'chi'
  endif
endfunction

" Plugin: fzf {{{2
let $FZF_DEFAULT_OPTS="--bind \"ctrl-n:preview-down,ctrl-p:preview-up\" --layout=reverse"
let $BAT_THEME='1337'

imap <C-x><C-l> <Plug>(fzf-complete-line)
inoremap <expr> <C-x><C-f> fzf#vim#complete#path('rg --files')
inoremap <expr> <C-x><C-k> fzf#vim#complete('cat /usr/share/dict/words')
inoremap <expr> <C-x><C-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case --follow -- '.shellescape(<q-args>), 1,
    \   fzf#vim#with_preview(), <bang>0)

function! s:histexec(cmd)
  call histadd('cmd', a:cmd) | execute a:cmd
endfunction

nnoremap <silent> <leader>ff :<C-u>Files<CR>
nnoremap <silent> <leader>fg :<C-u>GFiles?<CR>
nnoremap <silent> <leader>fb :<C-u>Buffers<CR>
nnoremap <silent> <leader>fc :<C-u>BCommits<CR>
nnoremap <silent> <leader>fs :call <SID>histexec('Rg <C-r><C-w>')<CR>
nnoremap <silent> <leader>fy :call <SID>histexec('Rg <C-r>"')<CR>
nnoremap <silent> <leader>fY :call <SID>histexec('Rg! <C-r>"')<CR>
nnoremap          <leader>fr :<C-u>Rg<Space>
nnoremap          <leader>fR :<C-u>Rg!<Space>
nnoremap <silent> <leader>f; :<C-u>History:<CR>
nnoremap <silent> <leader>f/ :<C-u>History/<CR>
nnoremap <silent> <leader>fm :<C-u>Marks<CR>

" Plugin: vim-grepper {{{2
let g:grepper = {}
let g:grepper.tools = ['rg', 'git', 'grep', 'findstr']
let g:grepper.rg = {
      \ 'grepprg': 'rg -H --no-heading --vimgrep --smart-case',
      \ 'grepformat': '%f:%l:%c:%m,%f:%l:%m'
      \ }
let g:grepper.dir = 'repo,file'
let g:grepper.jump = 0
let g:grepper.prompt = 0
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)

nnoremap <leader>rg :RgGrepper<space>
nnoremap <leader>qs :call <SID>histexec('RgGrepper <C-r><C-w>')<CR>
command! -nargs=* RgGrepper call <SID>RgGrepper(<f-args>)
function! s:RgGrepper(text)
  set nohlsearch | let @/ = a:text
  execute 'GrepperRg ' . a:text
endfunction
aug Grepper
  au!
  au User Grepper ++nested call setqflist([], 'r', {'context': {'bqf': {'pattern_hl': '\%#' . getreg('/')}}})
aug END

" Plugin: fern.vim {{{2
let g:fern#disable_default_mappings = 1
nmap <leader>d :Fern . -drawer -reveal=% -toggle -keep<CR>
aug vimrc
  au FileType fern call s:init_fern()
aug END
function! s:init_fern()
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-or-expand-or-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> <enter> <Plug>(fern-my-open-or-expand-or-collapse)
  nmap <buffer> h <Plug>(fern-action-collapse)
  nmap <buffer> l <Plug>(fern-action-open-or-expand)
  nmap <buffer> o <Plug>(fern-action-open:edit)
  nmap <buffer> O <Plug>(fern-action-open:edit)<C-w>p
  nmap <buffer> t <Plug>(fern-action-open:tabedit)
  nmap <buffer> T <Plug>(fern-action-open:tabedit)gT
  nmap <buffer> s <Plug>(fern-action-open:split)
  nmap <buffer> S <Plug>(fern-action-open:split)<C-w>p
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer> V <Plug>(fern-action-open:vsplit)<C-w>p
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> <C-j> <Plug>(fern-action-mark)j
  nmap <buffer> <C-k> k<Plug>(fern-action-mark)
  nmap <buffer> i <Plug>(fern-action-enter)
  nmap <buffer> u <Plug>(fern-action-leave)
  nmap <buffer> r <Plug>(fern-action-reload)
  nmap <buffer> cd <Plug>(fern-action-cd)
  nmap <buffer> dd <Plug>(fern-action-remove)
  nmap <buffer> qq :<C-u>quit<CR>
endfunction

" Plugin: vim-oscyank {{{2
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
nnoremap <silent> <space>f
    \ :call <SID>oscyank(expand('%:h') . '/' . expand('%:t') . ':' . line('.'))<CR>
nnoremap <silent> <space>p :call <SID>oscyank(getcwd())<CR>
nnoremap <silent> <space>l :echo expand("%:p") . ':' . line(".")<CR>

function! s:oscyank(content)
  let tempZ = @z
  let @z = a:content
  OSCYankReg z
  let @z = tempZ
endfunction

" Plugin: vim-gitgutter {{{2
if !has('nvim')
  nmap <silent> ]h <Plug>(GitGutterNextHunk)
      \ :call repeat#set("\<Plug>(GitGutterNextHunk)")<CR>
  nmap <silent> [h <Plug>(GitGutterPrevHunk)
      \ :call repeat#set("\<Plug>(GitGutterPrevHunk)")<CR>
  nmap <silent> \h :call GitGutterNextHunkCycle()<CR>
      \ :call repeat#set("\\h")<CR>

  function! GitGutterNextHunkCycle()
    let line = line('.')
    GitGutterNextHunk
    if line('.') == line
      1
      GitGutterNextHunk
    endif
  endfunction

  nmap <silent> <leader>hs <Plug>(GitGutterStageHunk)
  nmap <silent> <leader>hp <Plug>(GitGutterPreviewHunk)
endif

" Plugin: vim-fugitive {{{2
nnoremap <leader>gg :call GitIndex()<CR>
nnoremap <leader>gb :exe 'Git blame -w <bar> winc p'<CR>
nnoremap <leader>gc :Git commit<space>
nnoremap <leader>gC :Git commit --amend<space>
nnoremap <leader>gd :Git difftool -y<space>
nnoremap <leader>gh :Gvdiffsplit HEAD~
nnoremap <leader>ge :Gedit<CR>

function! GitIndex()
  let bufname = bufname('%')
  if winnr('$') == 1 && bufname == ''
    execute 'Git'
  else
    execute 'tab Git'
  endif
  if bufname == ''
    execute 'sil! noa bw #'
  endif
endfunction

augroup vimrc
  autocmd User FugitiveIndex nmap <buffer> <C-n> ]c
  autocmd User FugitiveIndex nmap <buffer> <C-p> [c
  autocmd User FugitiveIndex nmap <buffer> <C-s> s
  autocmd User FugitiveIndex nmap <buffer> <C-u> u
  autocmd User FugitiveIndex nmap <buffer>     a -
  autocmd User FugitiveIndex nmap <buffer>    ]f ]/
  autocmd User FugitiveIndex nmap <buffer>    [f [/
  autocmd User FugitiveIndex nmap <buffer>   vsp dv
  autocmd User FugitiveIndex nmap <buffer>    sp dh
  autocmd User FugitiveIndex nmap <buffer> <Esc> dq
augroup END

" Plugin: git-messenger.vim {{{2
let g:git_messenger_no_default_mappings = 0
let g:git_messenger_always_into_popup = 1
nmap <leader>gm <Plug>(git-messenger)

" Plugin: vim-flog {{{2
nmap <leader>gl :Flog<CR>
nmap <leader>gf :Flog -path=%<CR>

" Plugin: vim-translator {{{2
nmap <silent> <leader>t <Plug>Translate
vmap <silent> <leader>t <Plug>TranslateV

" Plugin: tagbar {{{2
nmap <F8> :TagbarToggle<CR>

set tags=tags,tags;
let g:tagbar_width=30
let g:tagbar_sort = 0
let g:tagbar_compact=1
let g:tagbar_type_vim = {
  \   'ctagstype' : 'vim',
  \   'kinds' : [
  \     's:settings',
  \     'f:functions',
  \   ]
  \ }

" Plugin: vim-commentary {{{2
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s
noremap <leader>/ :Commentary<CR>

" Plugin: vim-easy-align {{{2
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Plugin: undotree {{{2
nnoremap <F9> :UndotreeToggle<CR>

let g:undotree_WindowLayout = 3
let g:undotree_SplitWidth = 45
let g:undotree_SetFocusWhenToggle = 1

" Plugin: delimitMate {{{2
imap <expr> <CR>
    \ pumvisible() ? "\<C-y>" :
    \ getline('.')[:col('.') - 2] =~ '^\s*$' ? '<Plug>delimitMateCR' :
    \ "\<C-g>u<Plug>delimitMateCR"

" Plugin: vim-visual-multi {{{2
let g:VM_default_mappings = 0
let g:VM_leader = '<Space>'
let g:VM_maps = {}
let g:VM_maps['Find Under'] = '<C-d>'
let g:VM_maps['Find Subword Under'] = '<C-d>'

" Plugin: vim-startify {{{2
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

nnoremap <silent> <leader><space> :Startify<CR>
let g:startify_padding_left = 10
let g:startify_lists = [
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
      \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
      \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]

" Plugin: hop.nvim {{{2
if has('nvim')
  hi HopNextKey guifg=#ff9900
  hi HopNextKey1 guifg=#ff9900
  hi HopNextKey2 guifg=#ff9900
  nmap f :HopChar1<CR>
endif

" Plugin: nvim-hlslens {{{2
if has('nvim')
  let hl = "<Cmd>lua require('hlslens').start()<CR>"
  for x in ['n', 'N']
    execute printf("noremap <silent> %s <Cmd>execute('normal! ' . v:count1 . '%s')<CR>%szzzv", x, x, hl)
  endfor
  for x in ['*', '#', 'g*', 'g#']
    execute printf('noremap %s %s%szzzv', x, x, hl)
  endfor
endif

" Plugin: rust.vim {{{2
let g:rustfmt_autosave = 1
