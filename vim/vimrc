" Plug {{{1
function! s:plug_begin(fn, plugged)
  if empty(glob(a:fn))
    silent execute '!curl -fLo ' . shellescape(a:fn) . ' --create-dirs 
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin(a:plugged)
endfunction

if has('nvim')
  call s:plug_begin($HOME . '/.local/share/nvim/site/autoload/plug.vim',
                  \ $HOME . '/.local/share/nvim/site/plugged')
else
  call s:plug_begin($HOME . '/.vim/autoload/plug.vim', $HOME . '/.vim/plugged')
endif
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'ojroques/vim-oscyank'
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'shougo/unite.vim'
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'voldikss/vim-translator'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tweekmonster/startuptime.vim'
Plug 'justinmk/vim-sneak'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'andymass/vim-matchup'
Plug 'michaeljsmith/vim-indent-object'
if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'kevinhwang91/nvim-bqf'
else
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
endif
call plug#end()

" Option {{{1
set encoding=utf-8
set hidden
set tabstop=8
set shiftwidth=2
set softtabstop=2
set autoindent
set expandtab       " Expand TABs to spaces
set cmdheight=1     " Give more space for displaying messages
set updatetime=300  " Default 4000ms leads to noticeable delays
set shortmess+=c    " Don't pass messages to |ins-completion-menu|
set hlsearch
set incsearch
set number relativenumber
set colorcolumn=80
set signcolumn=yes
set cursorline
set laststatus=2
set list
set t_u7= " https://github.com/vim/vim/issues/390#issuecomment-531477332
set t_RV= " https://stackoverflow.com/questions/21618614/vim-shows-garbage-characters
if !has('gui_running')
  set t_Co=256
endif

" backup/swap/info/undo settings
set nobackup
set nowritebackup
set undofile
set swapfile
if has('nvim')
  set backupdir -=.
  set shada      ='100
else
  let $v = $HOME . '/.vim/files'
  set backupdir  =$v/backup
  set directory  =$v/swap//
  set undodir    =$v/undo
  set viewdir    =$v/view
  set viminfo    ='100,n$v/info/viminfo
  if empty(glob($v))
    silent !mkdir -p $v/{backup,swap,undo,view,info}
  endif
endif

if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±,trail:·'
  let &fillchars = 'vert: ,diff: '  " ⣿
  let &showbreak = '↪ '
  highlight VertSplit ctermfg=242
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  let &fillchars = 'vert: ,stlnc:#'
  let &showbreak = '-> '
  augroup vimrc
    autocmd InsertEnter * set listchars-=trail:.
    autocmd InsertLeave * set listchars+=trail:.
  augroup END
endif

" Init {{{1
syntax on
filetype plugin indent on

augroup vimrc
  autocmd!
augroup END

" Color {{{1
colorscheme gruvbox
set background=dark
if has('termguicolors')
  set termguicolors
endif
let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
hi Normal guibg=NONE ctermbg=NONE

" Mapping {{{1
let mapleader=","
nnoremap Y y$
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap T <C-w>gf
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : "") . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : "") . 'j'
nnoremap <silent>gm :let @/ = expand('<cword>')<CR>:set hls<CR>
nnoremap <silent>gc :set nohls<CR>
nnoremap <leader>ev :Tabe ~/.vimrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
inoremap <silent> <C-a> <home>
inoremap <silent> <C-e> <end>
inoremap <silent> <C-h> <left>
inoremap <silent> <C-l> <right>
inoremap <silent> <C-k> <up>
inoremap <silent> <C-j> <down>
inoremap <silent> <C-o> <end><CR>
inoremap <silent> <C-d> <ESC>ddi
cnoremap <C-a> <home>
cnoremap <C-e> <end>
cnoremap <C-h> <left>
cnoremap <C-l> <right>
cnoremap <C-p> <up>
cnoremap <C-n> <down>
" move text
vnoremap < <gv
vnoremap > >gv
vnoremap <silent> <C-j> :m '>+1<CR>gv=gv
vnoremap <silent> <C-k> :m '<-2<CR>gv=gv
" text object
vnoremap <silent> ib GoggV
onoremap <silent> ib :normal vib<CR>
vnoremap <silent> il g_o^
onoremap <silent> il :normal vil<CR>
vnoremap <silent> ia :<C-u>call argtextobj#v(1)<CR>
vnoremap <silent> aa :<C-u>call argtextobj#v(0)<CR>
onoremap <silent> ia :<C-u>call argtextobj#o(1)<CR>
onoremap <silent> aa :<C-u>call argtextobj#o(0)<CR>

" Window {{{2
nnoremap <S-up>    2<C-w>+
nnoremap <S-down>  2<C-w>-
nnoremap <S-left>  2<C-w><
nnoremap <S-right> 2<C-w>>
" <C-w>= equal size

nnoremap <silent><C-h> :<C-u>call <SID>tmux_navigate('h')<CR>
nnoremap <silent><C-j> :<C-u>call <SID>tmux_navigate('j')<CR>
nnoremap <silent><C-k> :<C-u>call <SID>tmux_navigate('k')<CR>
nnoremap <silent><C-l> :<C-u>call <SID>tmux_navigate('l')<CR>

function! s:tmux_navigate(direction) abort
  let oldwin = winnr()
  execute 'wincmd' a:direction
  if !empty($TMUX) && winnr() == oldwin
    let sock = split($TMUX, ',')[0]
    let direction = tr(a:direction, 'hjkl', 'LDUR')
    silent execute printf('!tmux -S %s select-pane -%s', sock, direction)
    if !has('nvim') | execute 'redraw!' | endif
  endif
endfunction

nnoremap <silent> <C-left>  :tabp<CR>
nnoremap <silent> <C-right> :tabn<CR>
nnoremap <silent> <F2>      :Tabe<CR>
inoremap <silent> <C-left>  <ESC>:tabp<CR>
inoremap <silent> <C-right> <ESC>:tabn<CR>
inoremap <silent> <F2>      <ESC>:Tabe<CR>

command! -nargs=* -complete=file Tabe call Tabe(<f-args>)

function! Tabe(...)
  if a:0 != 0
    for fn in a:000
      execute printf('tabe %s', fn)
    endfor
  else
    tab split
  endif
endfunction

" Editting {{{2
nnoremap <silent> <F5> :Hexe<CR>
nnoremap <silent> <F6> :Hexw<CR>

command! -nargs=* -complete=file Hexe call Hexe(<f-args>)
command! -nargs=0 Hexw execute '%!xxd -r' | set binary | set filetype= | w

function! Hexe(...)
  if a:0 != 0
    for fn in a:000
      execute printf('tabe %s', fn)
      execute '%!xxd' | set filetype=xxd
    endfor
  else
    execute '%!xxd' | set filetype=xxd
  endif
endfunction

augroup vimrc
  autocmd BufReadPre   *.bin let &bin=1
  autocmd BufReadPost  *.bin if &bin | %!xxd
  autocmd BufReadPost  *.bin set ft=xxd | endif
  autocmd BufWritePre  *.bin if &bin | %!xxd -r
  autocmd BufWritePre  *.bin endif
  autocmd BufWritePost *.bin if &bin | %!xxd
  autocmd BufWritePost *.bin set nomod | endif
augroup END

" Autocmd {{{1
augroup vimrc
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \ | exe "normal! g'\"" | endif
augroup END

" Filetype {{{1
augroup vimrc
  autocmd BufRead,BufNewFile *.stp set filetype=stp
augroup END

" Plugin {{{1
" Plugin: coc.nvim {{{2
" autocomplete
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if exists('*complete_info')
  inoremap <expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" highlight uses on hover
autocmd CursorHold * silent call CocActionAsync('highlight')

" navigation
nmap <silent> [d <Plug>(coc-diagnostic-prev)
    \ :call repeat#set("\<Plug>(coc-diagnostic-prev)")<CR>
nmap <silent> ]d <Plug>(coc-diagnostic-next)
    \ :call repeat#set("\<Plug>(coc-diagnostic-next)")<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn  <Plug>(coc-rename)

" show docs
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" scroll popup
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Left>"

" diagnostics to quickfix list
autocmd User CocDiagnosticChange silent call <SID>diagnostic_change()
nnoremap <silent> <leader>qd :call <SID>diagnostic_as_qflist()<CR>
let g:diag_qfid = -1

function! s:diagnostic_change()
  let l:info = getqflist({ 'id': g:diag_qfid, 'winid': 0, 'nr': 0 })
  if l:info['winid'] != 0
    let l:info['show'] = 0
    call s:diagnostic_as_qflist(l:info)
  endif
endfunction

function! s:diagnostic_as_qflist(...)
  let l:args = a:0 == 0 ? {} : a:1
  let l:diagnostics = CocAction('diagnosticList')
  let l:items = []
  for diag in l:diagnostics
    let l:text = printf('[%s %s] %s', get(diag, 'source', 'coc.nvim'),
      \ get(diag, 'code', ''), get(diag, 'message'))
    let l:item = {
      \ 'filename': diag['file'],
      \ 'lnum': diag['lnum'],
      \ 'col': diag['col'],
      \ 'text': l:text,
      \ 'type': diag['severity']
      \ }
    let l:items = add(l:items, l:item)
  endfor

  let l:id = -1
  let l:winid = get(l:args, 'winid', 0)
  let l:nr = get(l:args, 'nr', 0)
  let l:show = get(l:args, 'show', 1)

  if l:winid && l:nr
    let l:id = g:diag_qfid
  else
    let l:info = getqflist({ 'id': g:diag_qfid, 'winid': 0, 'nr': 0 })
    let l:id = l:info['id']
    let l:winid = l:info['winid']
    let l:nr = l:info['nr']
  endif

  let l:action = l:id == 0 ? ' ' : 'r'
  call setqflist([], l:action, {
    \ 'id': l:id,
    \ 'title': 'CocDiagnosticList',
    \ 'items': l:items
    \ })

  if l:id == 0
    let l:info = getqflist({ 'id': l:id, 'nr': l:nr })
    let g:diag_qfid = l:info['id']
    let l:nr = l:info['nr']
  endif

  if l:show
    if l:winid == 0
      execute 'bo cope'
    else
      if has('nvim')
        call nvim_set_current_win(l:winid)
      else
        execute l:winid . 'wincmd w'
      endif
    endif
    execute 'sil ' . l:nr . 'chi'
  endif
endfunction

" Plugin: fzf {{{2
let $FZF_DEFAULT_OPTS="--bind \"ctrl-n:preview-down,ctrl-p:preview-up\" --layout=reverse"
let $BAT_THEME='1337'

imap <C-x><C-l> <Plug>(fzf-complete-line)
inoremap <expr> <C-x><C-f> fzf#vim#complete#path('rg --files')
inoremap <expr> <C-x><C-k> fzf#vim#complete('cat /usr/share/dict/words')
inoremap <expr> <C-x><C-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case --follow -- '.shellescape(<q-args>), 1,
    \   fzf#vim#with_preview(), <bang>0)

function! s:histexec(cmd)
  call histadd('cmd', a:cmd) | execute a:cmd
endfunction

nnoremap <silent> <leader>p  :<C-u>Files<CR>
nnoremap <silent> <leader>gs :<C-u>GFiles?<CR>
nnoremap <silent> <leader>b  :<C-u>Buffers<CR>
nnoremap <silent>         S  :call <SID>histexec('Rg <C-r><C-w>')<CR>
nnoremap <silent> <leader>f  :call <SID>histexec('Rg <C-r>"')<CR>
nnoremap <silent> <leader>F  :call <SID>histexec('Rg! <C-r>"')<CR>
nnoremap          <leader>r  :<C-u>Rg<Space>
nnoremap          <leader>R  :<C-u>Rg!<Space>
nnoremap <silent> <leader>c  :<C-u>History:<CR>
nnoremap <silent> <leader>s  :<C-u>History/<CR>
nnoremap <silent> <C-x><C-j> :<C-u>Marks<CR>

" Plugin: nerdtree {{{2
nnoremap <leader>n :NERDTreeToggle<CR>

augroup vimrc
  autocmd VimEnter * NERDTree | wincmd p
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 &&
        \ exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
augroup END

" Plugin: vim-oscyank {{{2
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
nnoremap <silent> <leader>e :call <SID>get_fnln()<CR>
nnoremap <silent> <leader>w :echo expand("%:p") . ':' . line(".")<CR>

" copy remote server vim fn:ln to local system's clipboard for gdb or sth else
function! s:get_fnln()
  let l:tempZ = @z
  let @z = expand("%:h") . '/' . expand("%:t") . ':' . line(".")
  OSCYankReg z
  let @z = l:tempZ
endfunction

" Plugin: vim-gitgutter {{{2
nmap <silent> ]h <Plug>(GitGutterNextHunk)
    \ :call repeat#set("\<Plug>(GitGutterNextHunk)")<CR>
nmap <silent> [h <Plug>(GitGutterPrevHunk)
    \ :call repeat#set("\<Plug>(GitGutterPrevHunk)")<CR>
nmap <silent> \h :call GitGutterNextHunkCycle()<CR>
    \ :call repeat#set("\\h")<CR>

function! GitGutterNextHunkCycle()
  let line = line('.')
  GitGutterNextHunk
  if line('.') == line
    1
    GitGutterNextHunk
  endif
endfunction

nmap <silent> <leader>hs <Plug>(GitGutterStageHunk)
    \ :call repeat#set("\<Plug>(GitGutterStageHunk)")<CR>
nmap <silent> <leader>hp <Plug>(GitGutterPreviewHunk)
    \ :call repeat#set("\<Plug>(GitGutterPreviewHunk)")<CR>

" Plugin: vim-translator {{{2
nmap <silent> <leader>t <Plug>Translate

" Plugin: tagbar {{{2
nmap <F8> :TagbarToggle<CR>

set tags=tags,tags;
let g:tagbar_sort = 0
let g:tagbar_compact=1
let g:tagbar_type_vim = {
  \   'ctagstype' : 'vim',
  \   'kinds' : [
  \     's:settings',
  \     'f:functions',
  \   ]
  \ }

" Plugin: vim-commentary {{{2
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s
noremap <leader>/ :Commentary<CR>

" Plugin: vim-easy-align {{{2
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
